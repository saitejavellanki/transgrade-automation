import json
from google.generativeai import GenerativeModel, configure

# Configure Gemini API key
configure(api_key='AIzaSyDx7TtYxDvHBIyIjXd1i9MsDmnkQWpg2Nw')

def generate_prompt(key_data, student_data):
    return f"""You are given two JSON files:

1. `key.json`: This contains the official question structure. It defines the **correct number and order** of questions.
2. `student_answer.json`: This contains student answers. These may have:
   - Missing or incorrect question numbers.
   - Extra entries caused by **unintended splits** in a single answer (e.g., bullet points or continuation of an answer detected as a separate one).

Your task is to:
- Match each student answer to the correct question **by order**, using the order in the key as reference.
- If the student answer is **split across multiple entries** (e.g., a multi-line or multi-point answer mistakenly treated as separate answers), **merge them into one**.
- Do **not** invent or modify any content.
- Do **not** assign more student answers than actually exist.
- If the student answered fewer questions than expected, **leave out the unmatched questions**.
- The number of student answers in the final output should be equal to the number of **complete, merged answers** the student actually wrote (not the number of questions in the key).
- If there are extra answers due to split points, they must be **combined with their correct earlier parts**.
- **IMPORTANT**: The output must preserve both the question number AND section information exactly as shown in the key.json structure.

Your goal is to output:
1. A corrected `student_answer.json` where:
   - Question numbers and section identifiers are inferred from the key order.
   - The content is kept unchanged.
   - Only the correct number of student answers is present, aligned properly by question.
   - Format the output as a valid JSON array with no markdown.

2. A summary of corrections made, including:
   - Number of questions in the key vs. number in original student answers vs. number in final output
   - Number of answers that were merged (and which ones)
   - Any questions that were left unanswered
   - Any other structural corrections made

First provide the corrected JSON array, then provide the summary in a separate JSON object named "correction_summary".

### Key JSON:
{json.dumps(key_data, indent=2)}

### Student Answer JSON:
{json.dumps(student_data, indent=2)}

Return the corrected JSON with aligned and merged answers, followed by a correction summary JSON object."""

def restructure_student_answers(key_data, student_data):
    prompt = generate_prompt(key_data, student_data)
    model = GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(prompt)
    
    # Extract the response text
    response_text = response.text
    
    # Extract JSON objects from the response text
    # This handles cases where multiple JSON blocks are returned in markdown code blocks
    corrected_answers = None
    correction_summary = None
    
    # Find all JSON code blocks in the response
    json_blocks = []
    
    # Extract JSON from markdown code blocks
    code_blocks = response_text.split("```")
    for i in range(1, len(code_blocks), 2):
        if i < len(code_blocks):
            block = code_blocks[i]
            # Remove "json" if it's at the beginning of the block
            if block.startswith("json"):
                block = block[4:].strip()
            else:
                block = block.strip()
            
            if block:
                json_blocks.append(block)
    
    # If no code blocks were found, try to extract JSON directly
    if not json_blocks:
        # Look for array for corrected answers
        array_start = response_text.find('[')
        array_end = response_text.rfind(']')
        
        if array_start >= 0 and array_end > array_start:
            json_blocks.append(response_text[array_start:array_end+1])
        
        # Look for object for correction summary
        obj_start = response_text.find('{')
        obj_end = response_text.rfind('}')
        
        if obj_start >= 0 and obj_end > obj_start:
            json_blocks.append(response_text[obj_start:obj_end+1])
    
    # Process extracted JSON blocks
    for block in json_blocks:
        try:
            parsed = json.loads(block)
            
            # Determine if this is the answers array or the summary object
            if isinstance(parsed, list):
                corrected_answers = parsed
            elif isinstance(parsed, dict) and "correction_summary" in parsed:
                correction_summary = parsed["correction_summary"]
            elif isinstance(parsed, dict) and not correction_summary:
                # This might be just the summary without the "correction_summary" wrapper
                correction_summary = parsed
        except json.JSONDecodeError:
            # Skip blocks that can't be parsed
            continue
    
    # If no correction summary was found but we have answers, create a basic summary
    if corrected_answers and not correction_summary:
        correction_summary = {
            "note": "Generated summary (no explicit summary found in API response)",
            "final_answer_count": len(corrected_answers)
        }
    
    # Return the results
    result = {}
    if corrected_answers:
        result["corrected_answers"] = corrected_answers
    if correction_summary:
        result["correction_summary"] = correction_summary
    
    # If neither was found, return an error
    if not result:
        result = {
            "error": "Failed to extract valid JSON from response",
            "raw_response": response_text
        }
    
    return result

# Example usage:
# key_data = {...}  # Your key.json content
# student_data = {...}  # Your student_answer.json content
# result = restructure_student_answers(key_data, student_data)
# print("Corrected answers:", result.get("corrected_answers"))
# print("Correction summary:", result.get("correction_summary"))